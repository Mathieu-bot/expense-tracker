openapi: 3.0.0
info:
  title: Smart Personal Expense Tracker API
  description: REST API for managing personal expenses, incomes, receipts, and categories.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
paths:
  /auth/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User created
  /auth/login:
    post:
      summary: Login and receive JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Token returned

  /expenses:
    get:
      summary: List all user expenses
      parameters:
        - in: query
          name: start
          schema:
            type: string
          description: Start date (ISO string)
        - in: query
          name: end
          schema:
            type: string
          description: End date (ISO string)
        - in: query
          name: category
          schema:
            type: string
        - in: query
          name: type
          schema:
            type: string
            enum: [recurring, one-time]
      responses:
        "200":
          description: List of expenses
    post:
      summary: Create a new expense
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required: [amount, date, categoryId]
              properties:
                amount:
                  type: number
                date:
                  type: string
                categoryId:
                  type: string
                description:
                  type: string
                type:
                  type: string
                  enum: [one-time, recurring]
                startDate:
                  type: string
                endDate:
                  type: string
                receipt:
                  type: string
                  format: binary
      responses:
        "201":
          description: Expense created

  /expenses/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      summary: Get a single expense
      responses:
        "200":
          description: Expense data
    put:
      summary: Update an expense
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                amount:
                  type: number
                date:
                  type: string
                categoryId:
                  type: string
                description:
                  type: string
                type:
                  type: string
                  enum: [one-time, recurring]
                startDate:
                  type: string
                endDate:
                  type: string
                receipt:
                  type: string
                  format: binary
      responses:
        "200":
          description: Expense updated
    delete:
      summary: Delete an expense
      responses:
        "204":
          description: Expense deleted
  /incomes:
    get:
      summary: List all incomes
      parameters:
        - in: query
          name: start
          schema:
            type: string
        - in: query
          name: end
          schema:
            type: string
      responses:
        "200":
          description: List of incomes
    post:
      summary: Create new income
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [amount, date]
              properties:
                amount:
                  type: number
                date:
                  type: string
                source:
                  type: string
                description:
                  type: string
      responses:
        "201":
          description: Income created

  /incomes/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
    get:
      summary: Get an income entry
      responses:
        "200":
          description: Income data
    put:
      summary: Update an income entry
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                date:
                  type: string
                source:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Income updated
    delete:
      summary: Delete an income entry
      responses:
        "204":
          description: Income deleted

  /categories:
    get:
      summary: List user categories
      responses:
        "200":
          description: List of categories
    post:
      summary: Create new category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                icon_url:
                  type: string
                  nullable: true
      responses:
        "201":
          description: Category created

  /categories/{id}:
    put:
      summary: Rename a category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        "200":
          description: Category updated
    delete:
      summary: Delete a category
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Category deleted

  /summary/monthly:
    get:
      summary: Get current month summary
      parameters:
        - in: query
          name: month
          schema:
            type: string
      responses:
        "200":
          description: Monthly summary

  /summary:
    get:
      summary: Get summary for custom range
      parameters:
        - in: query
          name: start
          schema:
            type: string
        - in: query
          name: end
          schema:
            type: string
      responses:
        "200":
          description: Summary

  /summary/alerts:
    get:
      summary: Budget overrun alert
      responses:
        "200":
          description: Alert info

  /receipts/{id}:
    get:
      summary: Download/view receipt
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Receipt file

  /user/profile:
    get:
      summary: Get user profile
      responses:
        "200":
          description: Profile info
<<<<<<< HEAD
    put:
      summary: Update user profile
=======
    patch:
      summary: Update user profile
      description: Update username for the authenticated user
>>>>>>> 4f1ff1098e64f7feee04c94977f358fa4b1c0bb6
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                  pattern: '^[A-Za-z0-9_-]{3,50}$'
                firstname:
                  type: string
                  maxLength: 100
                lastname:
                  type: string
                  maxLength: 100
      responses:
        "200":
          description: Public user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        "400":
          description: Invalid username
        "401":
          description: Unauthorized
  /user/profile/password:
    patch:
      summary: Update user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Password updated
<<<<<<< HEAD
=======

  /auth/me:
    get:
      summary: Get current authenticated user
      responses:
        "200":
          description: Public user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
        "401":
          description: Unauthorized

  /auth/logout:
    post:
      summary: Logout current session
      responses:
        "204":
          description: No Content

components:
  schemas:
    PublicUser:
      type: object
      required: [user_id, email, created_at]
      properties:
        user_id:
          type: integer
        email:
          type: string
          format: email
        username:
          type: [string, 'null']
        firstname:
          type: [string, 'null']
        lastname:
          type: [string, 'null']
        created_at:
          type: string
          format: date-time
>>>>>>> 4f1ff1098e64f7feee04c94977f358fa4b1c0bb6
